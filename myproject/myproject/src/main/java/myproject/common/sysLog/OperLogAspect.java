package myproject.common.sysLog;import com.alibaba.fastjson.JSON;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.*;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestAttributes;import org.springframework.web.context.request.RequestContextHolder;import javax.servlet.http.HttpServletRequest;import java.util.HashMap;import java.util.Map;@Aspect@Componentpublic class OperLogAspect {//	@Autowired//	private SyslogService service;	//为了记录方法的执行时间	ThreadLocal<Long> startTime = new ThreadLocal<>();	/**	 * 设置操作日志切入点，这里介绍两种方式：	 * 1、基于注解切入（也就是打了自定义注解的方法才会切入）	 */	@Pointcut("@annotation(myproject.common.sysLog.SysLog)")//在注解的位置切入代码	public void operLogPoinCut() {	}	@Before("operLogPoinCut()")	public void beforMethod(JoinPoint point) {		startTime.set(System.currentTimeMillis());	}	/**	 * 设置操作异常切入点记录异常日志 扫描所有controller包下操作	 */	@Pointcut("execution(* myproject.controller.*.*(..))")	public void operExceptionLogPoinCut() {	}	/**	 * 正常返回通知，拦截用户操作日志，连接点正常执行完成后执行， 如果连接点抛出异常，则不会执行	 *	 * @param joinPoint 切入点	 * @param result    返回结果	 */	@AfterReturning(value = "operLogPoinCut()", returning = "result")	public void saveOperLog(JoinPoint joinPoint, Object result) {		// 获取RequestAttributes		RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();		// 从获取RequestAttributes中获取HttpServletRequest的信息		HttpServletRequest request = (HttpServletRequest) requestAttributes.resolveReference(RequestAttributes.REFERENCE_REQUEST);		try {//			// 从切面织入点处通过反射机制获取织入点处的方法//			MethodSignature signature = (MethodSignature) joinPoint.getSignature();//			// 获取切入点所在的方法//			Method method = signature.getMethod();//			// 获取操作//			SysLog myLog = method.getAnnotation(SysLog.class);//			String className = joinPoint.getTarget().getClass().getName();//			// 获取请求的方法名//			String methodName = method.getName();//			methodName = className + "." + methodName + "()";//			SyslogVO syslogVO = new SyslogVO();//			Long userId = 0L;//			String name = "游客";//			if (StpUtil.isLogin()) {//				userId = GloabUtils.getUserId();//				name = GloabUtils.getUserInfo().getName();//			}//			if (myLog != null) {//				syslogVO.setTitle(myLog.title());//设置模块名称//			}//			syslogVO.setCreateby(userId);//			syslogVO.setCreatebyuser(name);//			syslogVO.setMethod(methodName);//			syslogVO.setParams(argsArrayToString(joinPoint.getArgs()));//			if ("系统日志".equals(myLog.content())) {//				syslogVO.setLogtype("系统日志");////			} else {//				syslogVO.setLogtype("正常访问");//			}//			syslogVO.setRemoteaddr(getIp(request));//			syslogVO.setRequesturi(request.getRequestURI());//			Long takeTime = System.currentTimeMillis() - startTime.get();//记录方法执行耗时时间（单位：毫秒）//			syslogVO.setTime(takeTime);//			service.save(syslogVO);		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * 异常返回通知，用于拦截异常日志信息 连接点抛出异常后执行	 */	@AfterThrowing(pointcut = "operExceptionLogPoinCut()", throwing = "e")	public void saveExceptionLog(JoinPoint joinPoint, Throwable e) {		// 获取RequestAttributes		RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();		// 从获取RequestAttributes中获取HttpServletRequest的信息		HttpServletRequest request = (HttpServletRequest) requestAttributes.resolveReference(RequestAttributes.REFERENCE_REQUEST);		try {//			// 从切面织入点处通过反射机制获取织入点处的方法//			MethodSignature signature = (MethodSignature) joinPoint.getSignature();//			// 获取切入点所在的方法//			Method method = signature.getMethod();//			// 获取请求的类名//			String className = joinPoint.getTarget().getClass().getName();//			// 获取请求的方法名//			String methodName = method.getName();//			methodName = className + "." + methodName + "()";//			// 获取操作//			SysLog myLog = method.getAnnotation(SysLog.class);////			SyslogVO syslogVO = new SyslogVO();//			Long userId = 0L;//			String name = "游客";//			if (StpUtil.isLogin()) {//				userId = GloabUtils.getUserId();//				name = GloabUtils.getUserInfo().getName();//			}//			if (myLog != null) {//				syslogVO.setTitle(myLog.title());//设置模块名称//			}//			syslogVO.setCreateby(userId);//			syslogVO.setCreatebyuser(name);//			syslogVO.setMethod(methodName);//			syslogVO.setParams(argsArrayToString(joinPoint.getArgs()));//			syslogVO.setLogtype("异常访问");//			syslogVO.setRemoteaddr(getIp(request));//			syslogVO.setRequesturi(request.getRequestURI());//			syslogVO.setException(stackTraceToString(e.getClass().getName(), e.getMessage(), e.getStackTrace()));//			Long takeTime = System.currentTimeMillis() - startTime.get();//记录方法执行耗时时间（单位：毫秒）//			syslogVO.setTime(takeTime);//			service.save(syslogVO);		} catch (Exception e2) {			e2.printStackTrace();		}	}	/**	 * 转换异常信息为字符串	 */	public String stackTraceToString(String exceptionName, String exceptionMessage, StackTraceElement[] elements) {		StringBuffer strbuff = new StringBuffer();		for (StackTraceElement stet : elements) {			strbuff.append(stet + "\n");		}		String message = exceptionName + ":" + exceptionMessage + "\n\t" + strbuff;		message = substring(message, 0, 2000);		return message;	}	/**	 * 参数拼装	 */	private String argsArrayToString(Object[] paramsArray) {		String params = "";		if (paramsArray != null) {			for (Object o : paramsArray) {				if (o != null) {					try {						Object jsonObj = JSON.toJSON(o);						params += jsonObj.toString() + " ";					} catch (Exception e) {						e.printStackTrace();					}				}			}		}		return params.trim();	}	//字符串截取	public static String substring(String str, int start, int end) {		if (str == null) {			return null;		} else {			if (end < 0) {				end += str.length();			}			if (start < 0) {				start += str.length();			}			if (end > str.length()) {				end = str.length();			}			if (start > end) {				return "";			} else {				if (start < 0) {					start = 0;				}				if (end < 0) {					end = 0;				}				return str.substring(start, end);			}		}	}	/**	 * 转换request 请求参数	 *	 * @param paramMap request获取的参数数组	 */	public Map<String, String> converMap(Map<String, String[]> paramMap) {		Map<String, String> returnMap = new HashMap<>();		for (String key : paramMap.keySet()) {			returnMap.put(key, paramMap.get(key)[0]);		}		return returnMap;	}	//根据HttpServletRequest获取访问者的IP地址	public static String getIp(HttpServletRequest request) {		String ip = request.getHeader("x-forwarded-for");		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_CLIENT_IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_X_FORWARDED_FOR");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		return ip;	}}